import com.google.gson.Gson;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class LinkedListDebug {

    private static final Map<Integer, Node> linkedList = new HashMap<>();
    private static int currentIndex = 0;
    private static boolean asc = true; //false for descending

//----------------------------------------------------
public static void putNode(int index, int previousIndex, int num){
    Node node = new Node();
    node.previousIndex = previousIndex;
    node.value = num;
    linkedList.put(index, node);
}
//----------------------------------------------------
    public static int getCurrentIndex(){
        return currentIndex;
    }

    public static void setCurrentIndex(int num){
        currentIndex = num;
    }

//----------------------------------------------------

    public static int getValueAt(int index){
        return linkedList.get(index).value;
    }

    public static void setValueAt(int index, int num){
        Node change = linkedList.get(index);
        change.value = num;
        putNode(index, change.previousIndex, change.value);
    }

    public int getPreviousIndexAt(int index){
        return linkedList.get(index).previousIndex;
    }

    public static void setPreviousIndexAt(int index, int num){
        Node change = linkedList.get(index);
        change.previousIndex = num;
        putNode(index, change.previousIndex, change.value);
    }

    //----------------------------------------------------
    public static void push(int index, int num){
        if(!((asc&&index<=currentIndex) || (!asc&&index>=currentIndex))) {
            putNode(index, currentIndex, num);
            currentIndex = index;
        }
    }

    public static void pop(){
        currentIndex = linkedList.get(currentIndex).previousIndex;
    }

    public static void insertAtAsc(int index, int num){
        if(linkedList.containsKey(index)) return; //must remove it first!
        if(currentIndex==index) return; //must remove it first!
        if(currentIndex<index){push(index,num); return;}

        int closestIndex = findClosestIndexAsc(index);
        putNode(index, linkedList.get(closestIndex).previousIndex, num);
        linkedList.get(closestIndex).previousIndex = index;
    }


    public static void remove(int index){
        if(!linkedList.containsKey(index) || index==0) return; //must exist!
        if(currentIndex==index) {pop(); return;}

        int pointerIndex = findPointerIndex(index);
        int skipToIndex = linkedList.get(index).previousIndex;
        linkedList.get(pointerIndex).previousIndex = skipToIndex;
    }

    private static int findPointerIndex(int index) {
        int atCurrent = currentIndex;
        int prev = linkedList.get(atCurrent).previousIndex;
        while(prev!=index){
            atCurrent = prev;
            prev = linkedList.get(atCurrent).previousIndex;
        }
        return atCurrent;
    }


    public static void truncateAt(int index){
        if(!linkedList.containsKey(index) || index==0 || index==currentIndex) return; //must exist!
        currentIndex = index;
    }

    public static int findClosestIndexAsc(int searchIndex){
        int atCurrent = currentIndex;
        int prev = linkedList.get(atCurrent).previousIndex;
        while(prev>searchIndex){
            atCurrent = prev;
            prev = linkedList.get(atCurrent).previousIndex;
        }
        return atCurrent;
    }



    public static String printList(){
        String out = ""+currentIndex;

        int iterator = currentIndex;
        while(iterator>0) {
            Node node = linkedList.get(iterator);
            int previousIndex = node.previousIndex;
            int value = node.value;
//            System.out.println(iterator + ":" + previousIndex + ":" + value);
            out = out+"-->"+"{"+iterator + ":" + previousIndex + ":" + value+"}";
            iterator = previousIndex;
        }
        out = out+"-->end";

//        System.out.println(out);
        return out;
    }

    public static boolean validate(String map){
    map = map.replaceAll("-","");
    String[] sp = map.split(">");
    if(!sp[sp.length-1].equals("end")) {
        return false;
    }

    int current = Integer.parseInt(sp[0]);
    int next = current;

    for(int t=1;t<sp.length-1;t++){
        String val = sp[t];
        val = val.replaceAll("\\{","");
        val = val.replaceAll("}","");
        String[] ssp = val.split(":");

        current = Integer.parseInt(ssp[0]);
        if(next!=current){
            return false;
        }
        next = Integer.parseInt(ssp[1]);
    }
    return true;
    }




    public static void main(String[] args){
        //setup
        Node first = new Node();
        first.previousIndex = (0);
        first.value = (0);
        linkedList.put(0,first);
        //------------------------------
        while(true){
            int rint = rnd.nextInt(5)+1;
            if(rint==1){action1();}
            if(rint==2){action2();}
            if(rint==3){action3();}
            if(rint==4){action4();}
            if(rint==5){action5();}

            String map = printList();
//            System.out.println(map);
            boolean validate = validate(map);
            if(!validate){
                System.out.println(rint);
                System.out.println(map);
                break;
            }


        }


    }

    private static Random rnd = new Random();
    public static void action1(){
        push(rnd.nextInt(10000)+1, rnd.nextInt(10000)+1);
    }

    public static void action2(){
        pop();
    }

    public static void action3(){
        insertAtAsc(rnd.nextInt(10000)+1, rnd.nextInt(10000)+1);
    }

    public static void action4(){
        remove(rnd.nextInt(10000)+1);
    }

    public static void action5(){
        truncateAt(rnd.nextInt(10000)+1);
    }


}
class Node {
    public Integer previousIndex = null;
    public Integer value = null;
}
