import com.google.gson.Gson;

import java.util.HashMap;
import java.util.Map;

public class LinkedListDebug {

    private static final Map<Integer, Node> linkedList = new HashMap<>();
    private static int currentIndex = 0;


    public static int getCurrentIndex(){
        return currentIndex;
    }

    public static void setCurrentIndex(int num){
        currentIndex = num;
    }

//----------------------------------------------------

    public static int getValueAt(int index){
        return linkedList.get(index).value;
    }

    public static void setValueAt(int index, int num){
        Node change = linkedList.get(index);
        change.value = num;
        linkedList.put(index, change);
    }

    public int getPreviousIndexAt(int index){
        return linkedList.get(index).previousIndex;
    }

    public static void setPreviousIndexAt(int index, int num){
        Node change = linkedList.get(index);
        change.previousIndex = num;
        linkedList.put(index, change);
    }

    //----------------------------------------------------
    public static void push(int index, int num, boolean asc){
        Node node = new Node();
        node.previousIndex = currentIndex;
        node.value = num;
        if((asc&&index<=currentIndex) || (!asc&&index>=currentIndex)){
            //don't do it, must remove first
        }
        else {
            linkedList.put(index, node);
            currentIndex = index;
        }
    }

    public static void pop(){
        currentIndex = linkedList.get(currentIndex).previousIndex;
    }

    public static void insertAtAsc(int index, int num, boolean asc){
        if(linkedList.containsKey(index)) return; //must remove it first!
        if(currentIndex==index) return;
        if(currentIndex<index){push(index,num,true); return;}

        int closestIndex = findClosestIndexAsc(index);
        Node node = new Node();
        node.previousIndex = (linkedList.get(closestIndex).previousIndex);
        node.value = num;
        linkedList.put(index, node);

        Node closestNode = linkedList.get(closestIndex);
        closestNode.previousIndex = index;
    }
    public static void truncateAt(int searchIndex, boolean asc){
       // currentIndex = asc?findClosestIndexAsc(searchIndex):findClosestIndexDesc(searchIndex);
    }

    public static int findClosestIndexAsc(int searchIndex){
        int atCurrent = currentIndex;
        int prev = linkedList.get(atCurrent).previousIndex;
        while(prev>searchIndex){
            atCurrent = prev;
            prev = linkedList.get(atCurrent).previousIndex;
        }
        return atCurrent;

    }



    public static void printList(){
        String out = ""+currentIndex;

        int iterator = currentIndex;
        while(iterator>0) {
            Node node = linkedList.get(iterator);
            int previousIndex = node.previousIndex;
            int value = node.value;
//            System.out.println(iterator + ":" + previousIndex + ":" + value);
            out = "{"+iterator + ":" + previousIndex + ":" + value+"}<--"+out;
            iterator = previousIndex;
        }
        out = "end<--"+out;

        System.out.println(out);
    }




    public static void main(String[] args){
        //setup
        Node first = new Node();
        first.previousIndex = (0);
        first.value = (0);
        linkedList.put(0,first);
        Gson gson = new Gson();
        //------------------------------

        push(1,1, true);
        push(3,5, true);
        push(5,6, true);
        push(7,9, true);
        push(9,9, true);
        printList();
        insertAtAsc(14,9,true);


        printList();




    }
}
class Node {
    public Integer previousIndex = null;
    public Integer value = null;
}
